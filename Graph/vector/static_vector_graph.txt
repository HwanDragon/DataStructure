#include <iostream>
#include <vector>

#define MAX_NODE_COUNT 10

using namespace std;

// 노드정보
typedef struct Node
{
	int data;	// 저장할 데이터
};

typedef struct Graph
{
	int nodeCount;	// 전체 노드 개수
	Node nodes[MAX_NODE_COUNT];	// 전체 노드 저장
};
vector<int> adj[MAX_NODE_COUNT];	// 자식 노드 정보 기록
bool visited[MAX_NODE_COUNT] = { 0, };	// 방문 여부를 저장할 배열

Graph g;	// 그래프

void initGraph()
{
	g.nodeCount = MAX_NODE_COUNT;
	for (int i = 0; i < MAX_NODE_COUNT; i++)
	{
		g.nodes[i].data = i;
	}
}

void printGraphAdj()
{
	int nodeCount = g.nodeCount;

	cout << "Graph adj \n";
	for (int i = 0; i < nodeCount; i++)
	{
		cout << i << " -> ";
		for (int j = 0; j < adj[i].size(); j++)
		{
			cout << adj[i][j] << " ";
		}
		cout << "\n";
	}

	cout << "\n";
}

void addEdge(int parentNodeIndex, int childNodeIndex)
{
	adj[parentNodeIndex].push_back(childNodeIndex);
	adj[childNodeIndex].push_back(parentNodeIndex);
}

void dfs(int nodeIndex)
{
	visited[nodeIndex] = true;
	cout << g.nodes[nodeIndex].data << " ";
	for (int i = 0; i < adj[nodeIndex].size(); i++)
	{
		int child = adj[nodeIndex].at(i);
		if (visited[child] == false)
			dfs(adj[nodeIndex][i]);
	}
}

//    0
//   /
//  1 -- 3    7 -- 9
//  |  / | \ /
//  | /  |  5
//  2 -- 4   \
//            6 -- 8
//


int main()
{
	initGraph();
	addEdge(0, 1);
	addEdge(1, 2);
	addEdge(1, 3);
	addEdge(2, 3);
	addEdge(2, 4);
	addEdge(3, 4);
	addEdge(3, 5);
	addEdge(5, 6);
	addEdge(6, 8);
	addEdge(5, 7);
	addEdge(7, 9);

	printGraphAdj();

	dfs(0);	// 0번 노드에서 dfs 시작

	return 0;
}