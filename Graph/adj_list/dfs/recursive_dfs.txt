#include <iostream>
#include <stack>
#include <queue>
#include <vector>
#include <algorithm>
#include<string.h>

#define MAX_NODE 10

using namespace std;

typedef struct Node
{
	int data;	// 저장할 데이터
	vector<Node*> adj;	// 인접리스트
};

typedef struct Graph
{
	vector<Node*> nodes;
};

bool visited[MAX_NODE] = { 0, };	// 해당 노드 탐색여부 확인
Graph g;	// 그래프

// 노드 생성
void makeNode(int count)
{
	for (int i = 0; i < count; i++)
	{
		Node* n = new Node();
		n->data = i;
		g.nodes.push_back(n);
	}
}

// 노드간의 엣지 생성
void addEdge(int n1, int n2) {
	Node* first = g.nodes.at(n1);
	Node* second = g.nodes.at(n2);

	first->adj.push_back(second);
	second->adj.push_back(first);
}

// bfs 탐색 알고리즘 (bfs 탐색 알고리즘은 queue를 사용)
// -----------------암기할것--------------------
// dfs - stack 또는 재귀함수 사용 
// bfs - queue 사용
//---------------------------------------------
// 재귀호출을 이용한 dfs 탐색 알고리즘
void dfs(int nodeIndex) {
	visited[nodeIndex] = true;
	Node* n = g.nodes.at(nodeIndex);
	cout << n->data << " ";

	for (int i = 0; i < n->adj.size(); i++) {
		Node* adjNode = n->adj.at(i);
		int childIndex = find(g.nodes.begin(), g.nodes.end(), adjNode) - g.nodes.begin();

		if (visited[childIndex] == false)
			dfs(childIndex);
	}
}

int main()
{
	//    0
	//   /
	//  1 -- 3    7 -- 9
	//  |  / | \ /
	//  | /  |  5
	//  2 -- 4   \
	//            6 -- 8
	//


	makeNode(MAX_NODE);
	addEdge(0, 1);
	addEdge(1, 2);
	addEdge(1, 3);
	addEdge(2, 3);
	addEdge(2, 4);
	addEdge(3, 4);
	addEdge(3, 5);
	addEdge(5, 7);
	addEdge(5, 6);
	addEdge(6, 8);
	addEdge(7, 9);

	// 0번 노드부터 탐색 시작
	// 1, 2번 등 다른 노드부터 탐색 후 결과 살펴볼것
	dfs(0);
	//dfs(3);


	return 0;
}