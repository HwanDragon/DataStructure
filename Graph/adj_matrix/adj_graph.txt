#include <iostream>

using namespace std;

typedef struct Node
{
	int data;
	bool visited;
};

typedef struct Graph
{
	int nodeCount;	// 전체 노드 개수
	bool **matrix;	// 자식 노드 정보 기록
	Node *nodes;	// 전체 노드 저장
};


Graph* makeGraph(int nodeCount)
{
	int i = 0;
	Graph* graph = (Graph*)malloc(sizeof(Graph));
	graph->matrix = (bool**)malloc(sizeof(bool*) * nodeCount);
	for (int i = 0; i < nodeCount; i++)
	{
		graph->matrix[i] = (bool*)malloc(sizeof(bool) * nodeCount);
	}
	graph->nodeCount = nodeCount;

	// 노드 생성
	graph->nodes = (Node*)malloc(sizeof(Node) * nodeCount);
	for (int i = 0; i < nodeCount; i++)
	{
		graph->nodes[i].data = i;
		graph->nodes[i].visited = false;
	}

	// 0으로 초기화
	for (int i = 0; i < nodeCount; i++)
	{
		for (int j = 0; j < nodeCount; j++)
		{
			graph->matrix[i][j] = 0;
		}
	}

	return graph;
}

void printGraphMatrix(Graph* graph)
{
	int nodeCount = graph->nodeCount;

	cout << "Node Data \n";
	for (int i = 0; i < nodeCount; i++)
	{
		cout << graph->nodes[i].data << " ";
	}
	cout << "\n\n";

	cout << "Graph Matrix \n";
	for (int i = 0; i < nodeCount; i++)
	{
		for (int j = 0; j < nodeCount; j++)
		{
			cout << graph->matrix[i][j] <<" ";
		}
		cout << "\n";
	}

	cout << "\n";
}

void addEdge(Graph* graph, int parentNodeIndex, int childNodeIndex)
{
	graph->matrix[parentNodeIndex][childNodeIndex] = true;
	graph->matrix[childNodeIndex][parentNodeIndex] = true;
}

void dfs(Graph* graph, int nodeIndex)
{
	graph->nodes[nodeIndex].visited = true;
	cout << graph->nodes[nodeIndex].data << " ";
	for (int i = 0; i < graph->nodeCount; i++)
	{
		if (graph->matrix[nodeIndex][i] == true && graph->nodes[i].visited == false)
		{
			dfs(graph, i);
		}
	}
}

//    0
//   /
//  1 -- 3    7 -- 9
//  |  / | \ /
//  | /  |  5
//  2 -- 4   \
//            6 -- 8
//


int main()
{
	int nodeCount = 10;
	Graph *g = makeGraph(nodeCount);
	addEdge(g, 0, 1);
	addEdge(g, 1, 2);
	addEdge(g, 1, 3);
	addEdge(g, 2, 3);
	addEdge(g, 2, 4);
	addEdge(g, 3, 4);
	addEdge(g, 3, 5);
	addEdge(g, 5, 6);
	addEdge(g, 6, 8);
	addEdge(g, 5, 7);
	addEdge(g, 7, 9);

	printGraphMatrix(g);

	dfs(g, 0);	// 0번 노드에서 dfs 시작

	return 0;
}