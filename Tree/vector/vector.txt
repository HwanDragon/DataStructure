#include <iostream>
#include <vector>

#define MAX_NODE_COUNT 10

using namespace std;

typedef struct Node
{
	int data;
};

typedef struct Tree
{
	int nodeCount;	// 전체 노드 개수
	Node* nodes;	// 전체 노드 저장
};
vector<int> adj[MAX_NODE_COUNT];	// 자식 노드 정보 기록

Tree* makeTree(int nodeCount)
{
	int i = 0;
	Tree* tree = (Tree*)malloc(sizeof(Tree));
	tree->nodeCount = nodeCount;

	// 노드 생성
	tree->nodes = (Node*)malloc(sizeof(Node) * nodeCount);
	for (int i = 0; i < nodeCount; i++)
	{
		tree->nodes[i].data = i;
	}

	return tree;
}

void printTreeMatrix(Tree* tree)
{
	int nodeCount = tree->nodeCount;

	cout << "Tree adj \n";
	for (int i = 0; i < nodeCount; i++)
	{
		cout << i << " -> ";
		for (int j = 0; j < adj[i].size(); j++)
		{
			cout <<  adj[i][j] << " ";
		}
		cout << "\n";
	}

	cout << "\n";
}

void addEdge(Tree* tree, int parentNodeIndex, int childNodeIndex)
{
	adj[parentNodeIndex].push_back(childNodeIndex);
}

void dfs(Tree* tree, int nodeIndex)
{
	for (int i = 0; i < adj[nodeIndex].size(); i++)
	{
		dfs(tree, adj[nodeIndex][i]);
	}

	cout << tree->nodes[nodeIndex].data << " ";
}

/*
*				0
*			   / \
*   		  /   \
*            1     2
*           / \   / \
*          3   4 5   6
*/

int main()
{
	int nodeCount = MAX_NODE_COUNT;
	Tree* tree = makeTree(nodeCount);
	addEdge(tree, 0, 1);
	addEdge(tree, 0, 2);
	addEdge(tree, 1, 3);
	addEdge(tree, 1, 4);
	addEdge(tree, 2, 5);
	addEdge(tree, 2, 6);

	printTreeMatrix(tree);

	dfs(tree, 0);	// 0번 노드에서 dfs 시작

	return 0;
}