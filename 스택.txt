#include <stdio.h>
#define MAX 30
 
typedef struct _ArrayStack {
    int top; //스택 맨 위의 인덱스
    int data[MAX]; //스택 데이터 공간
}ArrayStack;
 
typedef ArrayStack Stack; //배열로 구현한 스택
 
 
void Init(Stack* s) { //스택 초기화 top 값을 -1로
    s->top = -1; //top 초기값은 -1
}
 
int isEmpty(Stack* s) { //스택이 비었나?
    return s->top == -1; //top이 -1일 때 스택은 비어있음
}
 
int isFull(Stack* s) {  //스택이 꽉 찼나?
    return s->top == MAX - 1;
}
 
void Push(Stack* s, int item) { //스택의 맨 위에 데이터 삽입
    if (isFull(s)) printf("stack empty die");
    else {
        s->top++;
        s->data[s->top] = item;
    }
}
 
int Peek(Stack* s) { //스택 최상단의 데이터 검색, 찾은 데이터 반환
    int d;
    if (isEmpty(s)) {
        printf("stack full dis");
        return -1;
    }
    else {
        d = s->data[s->top];
        return d;
    }
}
 
int Pop(Stack* s) { //스택 최상단의 데이터 삭제, 삭제되는 데이터 반환
    int t = Peek(s);
    s->top--;
    return t;
}
 
void Display(Stack* s) { //스택 데이터 표시
    if (isEmpty(s)) printf("stack empty die");
    else {
        printf("bottom [ ");
        for (int i = 0; i <= s->top; i++) {
            printf("%d ", s->data[i]);
        }
        printf(" ] top \n\n");
    }
}
 
int main() {
    Stack s1;
    Init(&s1);
    for (int i = 1; i <= 5; i++) {
        printf("Push(%d)\n", i);
        Push(&s1, i);
        Display(&s1);
    }
 
    printf("Pop() : %d\n", Pop(&s1));
    Display(&s1);
 
    printf("Pop() : %d\n", Pop(&s1));
    Display(&s1);
 
    printf("Peek() : %d\n", Peek(&s1));
    Display(&s1);
 
    printf("\n\n");
    return 0;
}