#include <stdio.h>
#include <stdlib.h>

// 다항식의 차수와 계수값을 저장하는 항 노드
typedef struct Node {
    int coef;       // 다항식 항의 계수부
    int expon;      // 다항식 항의 차수부
    struct Node* prev;  // 이전 노드 주소값
    struct Node* next;  // 다음 노드 주소값
} Node;

// 다항식 연결리스트의 머리와 꼬리 포인터 노드를 저장하는 구조체
typedef struct PList {
    Node* head;
    Node* tail;
} PList;

// 초기화 함수
void init(PList* poly)
{
    poly->head = poly->tail = NULL;
}

// 이중 연결리스트를 위한 노드를 만들고 주소를 반환
Node* createNode(int co, int ex)
{
    Node* new_node = (Node*)malloc(sizeof(Node));

    new_node->coef = co;
    new_node->expon = ex;
    new_node->prev = NULL;  // prev, next를 NULL로 초기화
    new_node->next = NULL;

    return new_node;
}

// coef는 계수, expon는 차수를 각각 매개변수로 전달하여 항을 생성하여
// 생성된 항을 다항식의 마지막 노드로 삽입함
void insertLast(PList* poly, int coef, int expon)
{
    Node* newNode = createNode(coef, expon);

    if (poly->tail == NULL) {
        poly->head = poly->tail = newNode;
    }
    else {
        poly->tail->next = newNode;
        newNode->prev = poly->tail;
        poly->tail = newNode;
    }
}

// 두 다항식 poly1, poly2를 더하여 poly3에 넣는다
void polyAdd(PList* poly1, PList* poly2, PList* poly3)
{
    Node* poly_term1 = poly1->head;
    Node* poly_term2 = poly2->head;
    int sum;

    while (poly_term1 && poly_term2) {  // poly1, poly2의 항 노드가 empty가 아니면
        if (poly_term1->expon == poly_term2->expon) {  // poly1, poly2 항의 다항식의 차수가 같으면
            sum = poly_term1->coef + poly_term2->coef;   // 계수값을 더해서 노드에 추가
            if (sum != 0)
                insertLast(poly3, sum, poly_term1->expon);
            poly_term1 = poly_term1->next;
            poly_term2 = poly_term2->next;
        }
        else if (poly_term1->expon > poly_term2->expon) {               // poly1항 다항식의 차수가 클 경우
            insertLast(poly3, poly_term1->coef, poly_term1->expon);
            poly_term1 = poly_term1->next;
        }
        else {   // poly2 항 다항식의 차수가 클 경우
            insertLast(poly3, poly_term2->coef, poly_term2->expon);
            poly_term2 = poly_term2->next;
        }
    }

    // term1, term2중의 하나가 먼저 끝나게 되면 남아있는 항들을 모두
    // 결과 다항식(poly_term3)으로 복사
    for (; poly_term1 != NULL; poly_term1 = poly_term1->next)
        insertLast(poly3, poly_term1->coef, poly_term1->expon);
    for (; poly_term2 != NULL; poly_term2 = poly_term2->next)
        insertLast(poly3, poly_term2->coef, poly_term2->expon);
}

// poly_nomial 다항식 출력함수
void printPoly(PList* poly)
{
    Node* current = poly->head;

    // 3x^3 형식으로 출력함
    for (;current != NULL;current = current->next) {
        if (current->expon != 0)
            printf("%dx^%d + ", current->coef, current->expon);
        else
            printf("%d ", current->coef);
    }
    printf("\n");
}

// 다항식 p1, p2, p3를 만들어서 p3 = p1 + p2 를 구함
int main() {
    PList p1, p2, p3;

    init(&p1);
    init(&p2);
    init(&p3);

    // 다항식 1을 생성
    insertLast(&p1, 3, 12); // 3x^12
    insertLast(&p1, 2, 8);  // 2x^8
    insertLast(&p1, 1, 0);  // 1

    // 다항식 2를 생성
    insertLast(&p2, 8, 12); // 8x^12
    insertLast(&p2, -3, 10);// -3x^10
    insertLast(&p2, 10, 6); // 10x^6

    // 다항식 3 = 다항식 1 + 다항식 2
    polyAdd(&p1, &p2, &p3);
    printf("다항식 1 = ");
    printPoly(&p1);
    printf("다항식 2 = ");
    printPoly(&p2);
    printf("다항식 1 + 다항식 2 = ");
    printPoly(&p3);
    return 0;
}
